aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = centroids,
alpha = .5) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = centroids,
alpha = .5) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = centroids,x = 'LD1', y='LD2'
alpha = .5) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
output[[target]] = input_df[[target]]
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot() +
geom_point(output,
aes_string(x = 'LD1', y='LD2',
group = target),
size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = centroids,x = 'LD1', y='LD2'
alpha = .5) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
output[[target]] = input_df[[target]]
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = centroids,
mapping = aes_string(x = 'LD1', y = 'LD2')) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
centroids
class(centroids)
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
output[[target]] = input_df[[target]]
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2')) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
output[[target]] = input_df[[target]]
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2')) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2', group = target)) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2', group = target)) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2')) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
as.data.frame(centroids)
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'),color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
ggplotly(p)
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot() +
geom_point(output,
aes_string(x = 'LD1', y='LD2',
group = target),
size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p <- ggplot() +
geom_point(output,
aes(x = 'LD1', y='LD2',
group = target),
size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p <- ggplot() +
geom_point(data = output,
aes_string(x = 'LD1', y='LD2',
group = target),
size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
ggplotly(p)
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3, name="ddd") +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=5,alpha=.3, name="ddd") +scale_fill_manual(name="", values=c("white","red"))+
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=5,alpha=.3)
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
output[[target]] = input_df[[target]]
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=5,alpha=.3)
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
table(lda_cv$class, input_df[[target]])
prop.table(table(lda_cv$class, input_df[[target]]))
source('~/Project/Shiny_PCA/PLSDA.R', echo=TRUE)
source('~/Project/Shiny_PCA/PLSDA.R', echo=TRUE)
plotIndiv(
plsda.model,
blocks = c(1, 2),
# ind.names = TRUE,
legend = TRUE,
ellipse = TRUE,
# star = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2',
rep.space = "Y-variate",
title = 'PLSDA Sample Plot (t1 v.s. t2)'
)
plotIndiv(
plsda.model,
blocks = c(1, 2),
# ind.names = TRUE,
legend = TRUE,
ellipse = TRUE,
# star = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2',
rep.space = "XY-variate",
title = 'PLSDA Sample Plot (t1 v.s. t2)'
)
plotIndiv(
plsda.model,
blocks = c(1, 2),
# ind.names = TRUE,
legend = TRUE,
ellipse = TRUE,
# star = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2',
# rep.space = "XY-variate",
title = 'PLSDA Sample Plot (t1 v.s. t2)'
)
plotIndiv(
plsda.model,
blocks = c(1, 2),
# ind.names = TRUE,
legend = TRUE,
ellipse = TRUE,
# star = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2',
centroid = TRUE,
# rep.space = "XY-variate",
title = 'PLSDA Sample Plot (t1 v.s. t2)'
)
plotIndiv(
plsda.model,
blocks = c(1, 3),
group = input_df[[target]],
ellipse = TRUE,
legend = TRUE,
centroid = TRUE,
title = 'PLSDA Sample Plot (t1 v.s. t3)'
)
plsda_vali_loo
print(pred)
pred['Actual'] == pred['Prediction']
pred[['Actual']] == pred[['Prediction']]
class(pred)
pred[,['Actual']]
pred[,'Actual']
pred[,'Actual'] == pred[, 'Prediction']
pred <-
as.data.frame(cbind(Actual = as.character(input_df[[target]]),
Prediction = plsda_vali_loo$class$max.dist[, , 3]))
pred[['Actual']] == pred[['Prediction']]
print(pred)
source('~/Project/Shiny_PCA/LDA.R', echo=TRUE)
# LDA analysis on sample JSON data
## Initialization
rm(list=ls())
library("jsonlite")
library("MASS")
library("caret")  # Optional if too big
library("plotly")
library("DiscriMiner")
library("candisc")
options(warn = -1)
# Load data
json_data <- fromJSON(txt = "./Data/data_norm.json")
input_df <- json_data$data
predictor_list <- json_data$nameList
target <- "group"
input_df[[target]] <- as.factor(input_df[[target]])
# Optional (Normalize and scale data)
# input <- scale(input_df[predictor_list], center = TRUE, scale = TRUE)
f <- as.formula(paste(target, "~ ."))
lda_cv <- lda(f, data = input_df[, c(predictor_list, target)], CV = TRUE)
print(lda_cv)
#confusion matrix calculation
confmat_cv <- confusionMatrix(lda_cv$class, input_df[[target]])
print(confmat_cv)
# confusion matrix
## Count
confmat_cv$table
## Percentage
prop.table(confmat_cv$table, margin = 1)
## Or simply
table(lda_cv$class, input_df[[target]])
prop.table(table(lda_cv$class, input_df[[target]]), margin = 1)
source('~/Project/Shiny_PCA/PCA.R', echo=TRUE)
input_df.pca
View(input_df.pca)
res.var
View(res.var)
res.var$coord
res.var$cor
res.var$cos2
res.var$contrib
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "ID",
titlefont = f
)
y <- list(
title = "Score",
titlefont = f
)
p <- plot_ly(projected_df,
x = as.integer(row.names(projected_df)),
y = ~PC1,
name = "",
type = "bar"
) %>% layout(xaxis = x, yaxis = y)
p
p <- input_df.pca$rotation[,1:2]
p <- plot_ly(data = as.data.frame(p), x = ~PC1,
y = ~PC2, color = rownames(p),
marker = list(size = 16), type = 'scatter', mode = 'markers')
p <- p %>% layout(title = 'Loading plot')
p
input_df.pca$rotation[,1:2]
input_df.pca$rotation
