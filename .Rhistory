cats
cat("LOO CV Accurary:")
print(mean(pred[,'Actual'] == pred[,'Prediction']))
print(paste0(mean(pred[,'Actual'] == pred[,'Prediction']) * 100, "%"))
print(paste0(round(mean(pred[,'Actual'] == pred[,'Prediction']) * 100, 2), "%"))
cat("LOO CV Accurary:")
print(paste0(round(mean(pred[,'Actual'] == pred[,'Prediction']) * 100, 2), "%"))
cat("LOO CV Accurary:")
print(paste0(round(mean(pred[,'Actual'] == pred[,'Prediction']) * 100, 2), "%"))
cat("LOO CV Accurary:\n")
cat("LOO CV Accurary:\n")
print(paste0(round(mean(pred[,'Actual'] == pred[,'Prediction']) * 100, 2), "%"))
plotIndiv(plsda.model,blocks = c(1,2), group = input_df[[target]],ind.names = T,
ellipse = TRUE, legend = TRUE, title = 'PLSDA Sample Plot (t1 v.s. t2)')                          # 2 Plot the samples (coloured by classes automatically)
output
predict(plsda.model, input_df[predictor_list])
ttt <- predict(plsda.model, input_df[predictor_list])
View(ttt)
ttt$centroids
plsda.model$ind.mat
plsda.model$Y
plsda.model$ncomp
plsda.model$ncomp
plsda.model$mode
plsda.model$loadings
rowsum(plsda.model$loadings$X)
rowSums(plsda.model$loadings$X)
plotVar(plsda.model)                            # 3 Plot the variables
selectVar(plsda.model, comp=1)$name             # Selected variables on component 1
selectVar(plsda.model, comp=2)$name             # Selected variables on component 1
selectVar(plsda.model, comp=3)$name             # Selected variables on component 1
plotIndiv(
plsda.model,
blocks = c(1, 2),ind.names = FALSE, legend=TRUE,
ellipse = TRUE, star = TRUE,
X.label = 'PLS-DA 1', Y.label = 'PLS-DA 2',
title = 'PLSDA Sample Plot (t1 v.s. t2)')
plotIndiv(
plsda.model,
blocks = c(1, 2),ind.names = T, legend=TRUE,
ellipse = TRUE, star = TRUE,
X.label = 'PLS-DA 1', Y.label = 'PLS-DA 2',
title = 'PLSDA Sample Plot (t1 v.s. t2)')
plotVar(plsda.model)
plotVar(plsda.model)
selectVar(plsda.model, comp=3)$name
selectVar(plsda.model, comp=3)
selectVar(plsda.model, comp=1)
selectVar(plsda.model, comp=3)
auroc(plsda.model)
plotLoadings(MyResult.splsda2, contrib = 'max', method = 'mean')
plotLoadings(plsda.model, contrib = 'max', method = 'mean')
plotIndiv(
plsda.model,
style = "3d",ind.names = TRUE, legend=TRUE,
ellipse = TRUE, star = TRUE,
X.label = 'PLS-DA 1', Y.label = 'PLS-DA 2',
title = 'PLSDA Sample Plot (t1 v.s. t2)')
install.packages("rgl")
plotIndiv(
plsda.model,
style = "3d",ind.names = TRUE, legend=TRUE,
ellipse = TRUE, star = TRUE,
X.label = 'PLS-DA 1', Y.label = 'PLS-DA 2',
title = 'PLSDA Sample Plot (t1 v.s. t2)')
plot(plsda_vali_loo)
View(plsda.model)
plsda.model$X
plotIndiv(
plsda.model,
blocks = c(1, 2),ind.names = TRUE, legend=TRUE,
ellipse = TRUE, star = TRUE,
X.label = 'PLS-DA 1', Y.label = 'PLS-DA 2',
title = 'PLSDA Sample Plot (t1 v.s. t2)')
View(plsda_vali_loo)
plsda_vali_loo$predict$comp3
plotIndiv(
plsda.model,
blocks = c(2, 3),
group = input_df[[target]],
ellipse = TRUE,
legend = TRUE,
title = 'PLSDA Sample Plot (t2 v.s. t3)'
)
plsda.model
plsda.model$variates
validates = as.data.frame(plsda.model$variates$X)
validates
scale.loads <- 5
validates = as.data.frame(plsda.model$variates$X)
# 3D plot
p <- plot_ly(
data = validates,
x =  ~ comp1,
y =  ~ comp2,
z =  ~ comp3
) %>%
add_trace(type = "scatter3d",
mode = "markers",
color = projected_df[[target]])
for (k in 1:nrow(input_df.pca$rotation)) {
x <- c(0, input_df.pca$rotation[k, 1]) * scale.loads
y <- c(0, input_df.pca$rotation[k, 2]) * scale.loads
z <- c(0, input_df.pca$rotation[k, 3]) * scale.loads
p <- p %>% add_trace(
x = x,
y = y,
z = z,
name = paste0("PC", k),
type = "scatter3d",
mode = "lines",
line = list(width = 8),
opacity = 1
)
}
p
p <- plot_ly(
data = validates,
x =  ~ comp1,
y =  ~ comp2,
z =  ~ comp3
) %>%
add_trace(type = "scatter3d",
mode = "markers",
color = input_df[[target]])
for (k in 1:nrow(input_df.pca$rotation)) {
x <- c(0, input_df.pca$rotation[k, 1]) * scale.loads
y <- c(0, input_df.pca$rotation[k, 2]) * scale.loads
z <- c(0, input_df.pca$rotation[k, 3]) * scale.loads
p <- p %>% add_trace(
x = x,
y = y,
z = z,
name = paste0("PC", k),
type = "scatter3d",
mode = "lines",
line = list(width = 8),
opacity = 1
)
}
p
dim(plsda.model$variates$X)[2]
if (dim(plsda.model$variates$X)[2] >= 3) {
# Scale factor for loadings
scale.loads <- 5
validates = as.data.frame(plsda.model$variates$X)
# 3D plot
p <- plot_ly(
data = validates,
x =  ~ comp1,
y =  ~ comp2,
z =  ~ comp3
) %>%
add_trace(type = "scatter3d",
mode = "markers",
color = input_df[[target]])
p
}
p <- plot_ly(
data = validates,
x =  ~ comp1,
y =  ~ comp2,
z =  ~ comp3
) %>%
add_trace(type = "scatter3d",
mode = "markers",
color = input_df[[target]]) %>%
layout(title = "Global smoothers")
p
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "ID",
titlefont = f
)
y <- list(
title = "Score",
titlefont = f
)
p <- plot_ly(data=validates,
x = as.integer(row.names(validates)),
y = ~PC1,
name = "",
type = "bar"
) %>% layout(xaxis = x, yaxis = y)
p
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "ID",
titlefont = f
)
y <- list(
title = "Score",
titlefont = f
)
p <- plot_ly(data=validates,
x = as.integer(row.names(validates)),
y = ~comp1,
name = "",
type = "bar"
) %>% layout(xaxis = x, yaxis = y)
p
plotVar(plsda.model)
plotLoadings(plsda.model, contrib = 'max', method = 'mean')
plsda.model
plsda.model$loadings
plotVar(plsda.model)
plotLoadings(plsda.model, contrib = 'max', method = 'mean')
rbind(plsda.model$loadings$X, plsda.model$loadings$Y)
plot(rbind(plsda.model$loadings$X, plsda.model$loadings$Y))
class(plsda.model$loadings$X)
p <- ggplot(rbind(plsda.model$loadings$X, plsda.model$loadings$Y),
aes_string(x = 'comp1', y='comp2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
labs(title = "Typical Differentiation Function",
x = "comp1",
y = "comp2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
loading <- as.data.frame(rbind(plsda.model$loadings$X, plsda.model$loadings$Y))
loading <- as.data.frame(rbind(plsda.model$loadings$X, plsda.model$loadings$Y))
loading['sep'] <- 'Y'
nrow(plsda.model$loadings$X)
loading <- as.data.frame(rbind(plsda.model$loadings$X, plsda.model$loadings$Y))
loading['sep'] <- 'Y'
loading['sep'][1:nrow(plsda.model$loadings$X)] <- "X"
p <- ggplot(loading,
aes_string(x = 'comp1', y='comp2',
group = 'sep')) +
geom_point(size = 3,
alpha = .5,
aes_string(color = 'sep',
shape = 'sep')) +
labs(title = "Typical Differentiation Function",
x = "comp1",
y = "comp2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
loading['sep']
1:nrow(plsda.model$loadings$X)
loading$sep[1:nrow(plsda.model$loadings$X)] <- "X"
loading
loading['sep'] <- 'Y'
loading$sep[1:nrow(plsda.model$loadings$X)] <- "X"
loading
p <- ggplot(loading,
aes_string(x = 'comp1', y='comp2',
group = 'sep')) +
geom_point(size = 3,
alpha = .5,
aes_string(color = 'sep',
shape = 'sep')) +
labs(title = "Typical Differentiation Function",
x = "comp1",
y = "comp2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
plsda.model
View(plsda.model)
plsda.model$explained_variance
plsda.model$mat.c
plsda.model$loadings.star
plsda.model$loadings
View(plsda.model)
plsda.model$keepA
plsda.model$keepX
plsda.model$keepY
plotLoadings(plsda.model, contrib = 'max', method = 'mean')
plotLoadings(plsda.model, contrib = 'max', method = 'mean', comp = 3)
plotLoadings(plsda.model, contrib = 'max', method = 'mean', comp = 2)
plotLoadings(plsda.model, contrib = 'max', method = 'mean', comp = 1)
plsda.model$loadings
plsda.model$loadings$X
plsda.model$loadings$X^2
rowsum(plsda.model$loadings$X^2)
rowSums(plsda.model$loadings$X^2)
loading
source('~/Project/Shiny_PCA/PLSDA.R', echo=TRUE)
source('~/Project/Shiny_PCA/PLSDA.R', echo=TRUE)
install.packages("rols")
BiocManager::install("rols")
install_github("rols", force = T)
library(devtools)
install_github("rols", force = T)
install_github("lgatto、rols", force = T)
install_github("lgatto/rols", force = T)
library("rols")
getVipVn
install_github("lgatto/ropls", force = T)
install_github("bioconductor/ropls", force = T)
install.packages("BiocManager")
BiocManager::install("ropls")
library("ropls")
getVipVn(plsda.model)
getVipVn
showMethods("getVipVn")
json.plsda <- opls(input_df[predictor_list], input_df[[target]])
json.plsda <- opls(input_df[predictor_list], input_df[[target]], predI=3)
json.plsda <- opls(input_df[predictor_list], input_df[[target]], predI=3, plotL=F)
json.plsda <- opls(input_df[predictor_list], input_df[[target]], predI=3, fig.pdfC=F)
json.plsda
getVipVn(json.plsda)
VIP <- getVipVn(json.plsda)
barplot(VIP)
barplot(sort(VIP))
barplot(sort(VIP, decreasing = T))
print(VIP)
print(t(VIP))
print(VIP)
print(sort(VIP, decreasing = T))
f <- list(family = "Courier New, monospace",
size = 18,
color = "#7f7f7f")
x <- list(title = "ID",
titlefont = f)
y <- list(title = "Score",
titlefont = f)
p <- plot_ly(
data = validates,
x = as.integer(row.names(validates)),
y = ~ comp1,
name = "",
type = "bar"
) %>% layout(xaxis = x, yaxis = y)
p
source('~/Project/Shiny_PCA/PCA.R', echo=TRUE)
install.packages("haven")
source('~/Project/Shiny_PCA/PCA.R', echo=TRUE)
install.packages("haven")
source('~/Project/Shiny_PCA/PCA.R', echo=TRUE)
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "ID",
titlefont = f
)
y <- list(
title = "Score",
titlefont = f
)
p <- plot_ly(data=as.data.frame(projected_df),
x = as.integer(row.names(projected_df)),
y = ~PC1,
name = "",
type = "bar"
) %>% layout(xaxis = x, yaxis = y)
p
library("jsonlite")
library("ggbiplot")
library("factoextra")
library("plotly")
# Score plot
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "ID",
titlefont = f
)
y <- list(
title = "Score",
titlefont = f
)
p <- plot_ly(data=as.data.frame(projected_df),
x = as.integer(row.names(projected_df)),
y = ~PC1,
name = "",
type = "bar"
) %>% layout(xaxis = x, yaxis = y)
p
options(warn=-1)
source('~/Project/Shiny_PCA/PCA.R', echo=TRUE)
source('~/Project/Shiny_PCA/HCA.R', echo=TRUE)
source('~/Project/Shiny_PCA/HCA.R', echo=TRUE)
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
## Pred plot
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
ggd1 <- as.ggdend(dend)
p <- ggplot(ggd1) +
labs(title = paste0(
"Dendrogram of Agglomerative Hierarchical Clustering with ",
opt_method
)) +
theme(plot.title = element_text(hjust = 0.5))
# p <- ggplotly(p)
#
# for (i in 1:length(p$x$data)) {
#   p$x$data[[i]]$text <- c(p$x$data[[i]]$text, "")
#   p$x$data[[i]]$showlegend <- FALSE
# }
p
# Create a radial plot and remove labels
circlize_dendrogram(dend)
VIP <- getVipVn(json.plsda)
barplot(sort(VIP, decreasing = T))
print(sort(VIP, decreasing = T))
source('~/Project/Shiny_PCA/PLSDA.R', echo=TRUE)
barplot(sort(VIP, decreasing = T))
print(sort(VIP, decreasing = T))
p <- ggplot(loading,
aes_string(x = 'comp1', y='comp2',
group = 'sep')) +
geom_point(size = 3,
alpha = .5,
aes_string(color = 'sep',
shape = 'sep')) +
labs(title = "Loading Plot",
x = "comp1",
y = "comp2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
source('~/Project/Shiny_PCA/PCA.R', echo=TRUE)
input_df.pca
input_df.pca$sdev
input_df.pca$sdev^2
barplot(input_df.pca$sdev^2)
input_df.pca$sdev
names(input_df.pca$sdev)
paste("PC", 1:4)
paste0("PC", 1:4)
names(input_df.pca$sdev) <- paste0("PC", 1:length(input_df.pca$sdev))
barplot(input_df.pca$sdev^2)
source('~/Project/Shiny_PCA/PCA.R', echo=TRUE)
write.csv(projected_df, file = './PCA_projection.csv')
write.csv(projected_df, file = './PCA_projection.csv', row.names = FALSE)
library("xlsx")
install.packages("xlsx")
library("xlsx")
write.xlsx(projected_df, file = './PCA_projection.xlsx', sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
# Loading plot
plot(input_df.pca$rotation[,1:2])
# Add vertical and horizontal lines at c(0,0)
abline(h =0, v = 0, lty = 2)
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "ID",
titlefont = f
)
y <- list(
title = "Score",
titlefont = f
)
p <- plot_ly(data=as.data.frame(projected_df),
x = as.integer(row.names(projected_df)),
y = ~PC1,
name = "",
type = "bar"
) %>% layout(xaxis = x, yaxis = y)
p
source('~/Project/Shiny_PCA/LDA.R', echo=TRUE)
## Percentage
prop.table(confmat_cv$table, margin = 1)
# confusion matrix
## Count
confmat_cv$table
## Percentage
prop.table(confmat_cv$table, margin = 1)
print(lda_model)
# for 1st discriminant function
plot(lda_model, dimen=1, type="both") # fit from lda
plot(lda_model, dimen=3)
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
source('~/Project/Shiny_PCA/PLSDA.R', echo=TRUE)
source('~/Project/Shiny_PCA/PLSDA.R', echo=TRUE)
