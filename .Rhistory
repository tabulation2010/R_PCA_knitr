}
x.lda$class.funs <- class.funs
return(x.lda)
}
ty.lda(f, data = input_df[, c(predictor_list, target)])
ty.lda(f, x = input_df[, c(predictor_list, target)])
library(DiscriMiner)
install.packages("DiscriMiner")
library(DiscriMiner)
mylda = linDA(input_df[predictor_list], input_df[[target]])
summary(mylda)
mylda$functions
mylda
ty.lda <- function(x, groups){
x.lda <- lda(groups ~ ., as.data.frame(x))
gr <- length(unique(groups))   ## groups might be factors or numeric
v <- ncol(x) ## variables
m <- x.lda$means ## group means
w <- array(NA, dim = c(v, v, gr))
for(i in 1:gr){
tmp <- scale(subset(x, groups == unique(groups)[i]), scale = FALSE)
w[,,i] <- t(tmp) %*% tmp
}
W <- w[,,1]
for(i in 2:gr)
W <- W + w[,,i]
V <- W/(nrow(x) - gr)
iV <- solve(V)
class.funs <- matrix(NA, nrow = v + 1, ncol = gr)
colnames(class.funs) <- paste("group", 1:gr, sep=".")
rownames(class.funs) <- c("constant", paste("var", 1:v, sep = "."))
for(i in 1:gr) {
class.funs[1, i] <- -0.5 * t(m[i,]) %*% iV %*% (m[i,])
class.funs[2:(v+1) ,i] <- iV %*% (m[i,])
}
x.lda$class.funs <- class.funs
return(x.lda)
}
ty.lda(x = input_df, input_df[[target]])
ty.lda(x = input_df[predictor_list], input_df[[target]])
aaa <- ty.lda(x = input_df[predictor_list], input_df[[target]])
aaa$class.funs
mylda$functions
summary(mylda)
View(lda_model)
View(mylda)
print(lda_model$functions)
lda_model <- linDA(input_df[predictor_list], input_df[[target]])
summary(lda_model)
print(lda_model$functions)
print(lda_model$functions)
lda_model
View(lda_model)
install.packages("candisc")
library("candisc")
## Modeling with LDA
lda_model <- lda(f, data = input_df[, c(predictor_list, target)])
print(lda_model)
lda_model$means
output
predict(lda_model, input_df[predictor_list])
aaa <- predict(lda_model, input_df[predictor_list])
View(aaa)
View(lda_model)
lda_model$means
lda_model$lev
lda_model$scaling
lda_model$scaling %*% lda_model$means
lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = centroids,
alpha = .5) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = centroids,
alpha = .5) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = centroids,x = 'LD1', y='LD2'
alpha = .5) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
output[[target]] = input_df[[target]]
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot() +
geom_point(output,
aes_string(x = 'LD1', y='LD2',
group = target),
size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = centroids,x = 'LD1', y='LD2'
alpha = .5) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
output[[target]] = input_df[[target]]
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = centroids,
mapping = aes_string(x = 'LD1', y = 'LD2')) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
centroids
class(centroids)
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
output[[target]] = input_df[[target]]
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2')) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
output[[target]] = input_df[[target]]
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2')) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2', group = target)) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2', group = target)) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2')) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
as.data.frame(centroids)
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'),color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
ggplotly(p)
p <- ggplot(output,
aes_string(x = 'LD1', y='LD2',
group = target)) +
geom_point(size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot() +
geom_point(output,
aes_string(x = 'LD1', y='LD2',
group = target),
size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p <- ggplot() +
geom_point(output,
aes(x = 'LD1', y='LD2',
group = target),
size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p <- ggplot() +
geom_point(data = output,
aes_string(x = 'LD1', y='LD2',
group = target),
size = 3,
alpha = .5,
aes_string(color = target,
shape = target)) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
# geom_point(data = as.data.frame(centroids),
#            mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3) +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
ggplotly(p)
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=4,alpha=.3, name="ddd") +
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=5,alpha=.3, name="ddd") +scale_fill_manual(name="", values=c("white","red"))+
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=5,alpha=.3)
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
output = as.data.frame(predict(lda_model, input_df[predictor_list])$x)
output[[target]] = input_df[[target]]
centroids <- lda_model$means %*% lda_model$scaling
p <- ggplot() +
geom_point(output,
mapping = aes_string(x = 'LD1', y='LD2',
group = target,
color = target,
shape = target),size = 3,
alpha = .5
) +
geom_point(data = as.data.frame(centroids),
mapping = aes_string(x = 'LD1', y = 'LD2'), color="blue",size=5,alpha=.3)
labs(title = "Typical Differentiation Function",
x = "LD1",
y = "LD2") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
table(lda_cv$class, input_df[[target]])
prop.table(table(lda_cv$class, input_df[[target]]))
source('~/Project/Shiny_PCA/PLSDA.R', echo=TRUE)
source('~/Project/Shiny_PCA/PLSDA.R', echo=TRUE)
plotIndiv(
plsda.model,
blocks = c(1, 2),
# ind.names = TRUE,
legend = TRUE,
ellipse = TRUE,
# star = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2',
rep.space = "Y-variate",
title = 'PLSDA Sample Plot (t1 v.s. t2)'
)
plotIndiv(
plsda.model,
blocks = c(1, 2),
# ind.names = TRUE,
legend = TRUE,
ellipse = TRUE,
# star = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2',
rep.space = "XY-variate",
title = 'PLSDA Sample Plot (t1 v.s. t2)'
)
plotIndiv(
plsda.model,
blocks = c(1, 2),
# ind.names = TRUE,
legend = TRUE,
ellipse = TRUE,
# star = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2',
# rep.space = "XY-variate",
title = 'PLSDA Sample Plot (t1 v.s. t2)'
)
plotIndiv(
plsda.model,
blocks = c(1, 2),
# ind.names = TRUE,
legend = TRUE,
ellipse = TRUE,
# star = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2',
centroid = TRUE,
# rep.space = "XY-variate",
title = 'PLSDA Sample Plot (t1 v.s. t2)'
)
plotIndiv(
plsda.model,
blocks = c(1, 3),
group = input_df[[target]],
ellipse = TRUE,
legend = TRUE,
centroid = TRUE,
title = 'PLSDA Sample Plot (t1 v.s. t3)'
)
plsda_vali_loo
print(pred)
pred['Actual'] == pred['Prediction']
pred[['Actual']] == pred[['Prediction']]
class(pred)
pred[,['Actual']]
pred[,'Actual']
pred[,'Actual'] == pred[, 'Prediction']
pred <-
as.data.frame(cbind(Actual = as.character(input_df[[target]]),
Prediction = plsda_vali_loo$class$max.dist[, , 3]))
pred[['Actual']] == pred[['Prediction']]
print(pred)
